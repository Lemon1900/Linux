计算机的操作系统非常多，相互沟通要制订共同遵守的标准才行。网络就是是跨平台的统一标准。

一、什么是网络
网络就是几部计算机主机或者是网络打印机之类的接口设备， 透过网络线或者是无线网络的技术，将这些主机与设备连接起来， 
使得数据可以透过网络媒体(网络线以及其他网络卡等硬件)来传输的一种方式。

早期时候，为了解决数据传输问题，各主要信息相关的公司都在研究各自的网络连接技术， 以使自家的产品可以在办公室的环境底下组织起来，但是不同厂商传输不能解决。
为了解决网络硬件整合功能，所以在 1960 年代末期美国国防部就开始研究一个可以在这些不同的网络硬件上面运作的软件技术， 
使得不同公司的计算机或数据可以透过这个软件来达成数据沟通。这个研究由美国国防部尖端研究企画署 (Defense Advanced Research Project Agency, DARPA) 负责，
他们将该网络系统称为 ARPANET，就是目前熟知的 TCP/IP 技术的雏形了。
DARPA 在 1980 年正式推出 TCP/IP 技术后， 由于想要推展此项技术，因此与柏克莱 (Berkeley) 大学合作，将 TCP/IP 植入著名的 BSD Unix 系统内， 
由于大学乃是未来人才数据库的培养处，所以， TCP/IP 这项技术便吸引越来越多使用者的投入， 而这种连接网络的技术也被称之为 Internet.

Internet 就是使用 TCP/IP 的网络连接技术所串联起来的一个网络世界， 而这个 Internet 在 1980 年代之后由于对 email 的需求以及浏览器图形接口的兴起，
因此快速的蔓延在计算机世界中.但是当时Internet 是一个管理相当松散的所在。 只要你能够使用任何支持 TCP/IP 技术的硬件与操作系统，并且实际连接上网络后，
你就进入 Internet 的世界了
Internet 仅是提供一个网络的连接接口， 所以你只要连接上 Internet 后，全世界都可以任你遨游，不过也因为如此，『跨海』而来的攻击就成了简单的事件

 IEEE 标准规范
 以太网络最初是由全录公司 (Xerox PARC) 所建构出来的，而后透过 DEC, Intel 与 Xerox 合作将以太网络标准化。 
 再经由 IEEE (Institute of Electrical and Electronic Engineers) 这个国际著名的专业组织利用一个 802 的项目制定出标准，
 之后有 19 家公司宣布支持 IEEE 所发布的 802.3 标准， 并且到了 1989 年国际标准化组织 ISO (International Organization for Standard) 将以太网络编入
 IS88023 标准，这表示以太网络已经是一项公认的标准接口了，如此一来，大家都可以依据这个标准来设定与开发自己的硬件， 
 只要硬件符合这个标准，理论上，他就能够加入以太网络的世界。
 所以，购买以太网络时，仅需要查看这个以太网络卡支持哪些标准就能够知道这个硬件的功能有哪些。
 
 除了硬件之外，TCP/IP 这个 Internet 的通讯协议也是有标准的，这些标准大部分都以 RFC (Request For Comments, 注4) 的形式发布标准文件。 透过这些文件的辅助，
 任何人只要会写程序语言的话，就有可能发展出自己的 TCP/IP 软件， 并且连接上 Internet.
 
 
二、计算机网络组成组件
节点 (node)：节点主要是具有网络地址 (IP) 的设备之称,因此上面图示中的一般PC、Linux服务器、ADSL调制解调器与网络打印机等，个别都可以称为一个 node ！ 那中间那个集线器 (hub) 是不是节点呢？因为他不具有 IP ，因此 hub 不是节点。
服务器主机 (server)：就网络联机的方向来说，提供数据以『响应』给用户的主机， 都可以被称为是一部服务器。举例来说，Yahoo 是个 WWW 服务器，昆山的 FTP (http://ftp.ksu.edu.tw/) 是个文件服务器等等。
工作站 (workstation) 或客户端 (client)：任何可以在计算机网络输入的设备都可以是工作站， 若以联机发起的方向来说，主动发起联机去『要求』数据的，就可以称为是客户端 (client)。举例来说，一般 PC 打开浏览器对 Yahoo 要求新闻数据，那一般 PC 就是客户端。
网络卡 (Network Interface Card, NIC)：内建或者是外插在主机上面的一个设备， 主要提供网络联机的卡片，目前大都使用具有 RJ-45 接头的以太网络卡。一般 node 上都具有一个以上的网络卡， 以达成网络联机的功能。
网络接口：利用软件设计出来的网络接口，主要在提供网络地址 (IP) 的任务。 一张网卡至少可以搭配一个以上的网络接口；而每部主机内部其实也都拥有一个内部的网络接口，那就是 loopback (lo) 这个循环测试接口！
网络形态或拓朴 (topology)：各个节点在网络上面的链接方式，一般讲的是物理连接方式。
网关 (route) 或通讯闸 (gateway)：具有两个以上的网络接口， 可以连接两个以上不同的网段的设备，例如 IP 分享器就是一个常见的网关设备。那上面的 ADSL 调制解调器算不算网关呢？ 其实不太能算，因为调制解调器通常视为一个在主机内的网卡设备，我们可以在一般 PC 上面透过拨号软件， 将调制解调器仿真成为一张实体网卡 (ppp) ，因此他不太能算是网关设备

计算机网络区域范围
局域网络 (Local Area Network, LAN)：
节点之间的传输距离较近，例如一栋大楼内，或一个学校的校区内。可以使用较为昂贵的联机材料， 例如光纤或是高质量网络线 (CAT 6) 等。网络速度较快，
联机质量较佳且可靠，因此可应用于科学运算的丛集式系统、 分布式系统、云端负荷分担系统等。

广域网 (Wide Area Network, WAN)：
传输距离较远，例如城市与城市之间的距离，因此使用的联机媒体需要较为便宜的设备，例如经常使用的电话线就是一例。 由于线材质量较差，
因此网络速度较慢且可靠性较低一些，网络应用方面大多为类似 email, FTP, WWW 浏览等功能。


三、计算机网络协议： OSI 七层协定
以上各个节点之间是如何沟通讯息的?透过标准的通讯协议
但是，整个网络连接的过程相当复杂，包括硬件、软件数据封包与应用程序的互相链接等等， 如果想要写一支将联网全部功能都串连在一块的程序，那么当某个小环节出现问题时，整只程序都需要改写
解决办法是将整个网络连接过程分成数个阶层 (layer)，每个阶层都有特别的独立的功能， 而且每个阶层的程序代码可以独立撰写，
因为每个阶层之间的功能并不会互相干扰的。如此一来，当某个小环节出现问题时，只要将该层级的程序代码重新撰写即可。
所以程序撰写也容易，整个网络概念也就更清晰！ 那就是常听到的 OSI 七层协定 (Open System Interconnection) 的概念

依据定义来说，越接近硬件的阶层为底层 (layer 1)，越接近应用程序的则是高层 (layer 7)。 不论是接收端还是发送端，每个一阶层只认识对方的同一阶层数据
整个传送的过程是，我们透过应用程序将数据放入第七层的包裹，再将第七层的包裹放到第六层的包裹内， 依序一直放到第一层的最大的包裹内，然后传送出去给接收端。
接收端的主机就得由第一个包裹开始，依序将每个包裹拆开， 然后一个一个交给对应负责的阶层来视察。
既然说是包裹，那我们都知道，包裹表面都会有个重要的信息，这些信息包括有来自哪里、要去哪里、接收者是谁等等， 而包裹里面才是真正的数据。
同样的，在七层协议中，每层都会有自己独特的表头数据 (header)，告知对方这里面的信息是什么， 而真正的数据就附在后面。

七层与每一个阶层所负责的任务：
7.Application Layer:应用层
应用层本身并不属于应用程序所有，而是在定义应用程序如何进入此层的沟通接口，以将数据接收或传送给应用程序，最终展示给用户
6.Presentation Layer:表现层
我们在应用程序上面所制作出来的数据格式不一定符合网络传输的标准编码格式的！所以,在这个层级当中，主要的动作就是：将来自本地端应用程序的数据格式
转换(或者是重新编码)成为网络的标准格式， 然后再交给底下传送层等的协议来进行处理。所以，在这个层级上面主要定义的是网络服务(或程序)之间的数据格式的转换，
包括数据的加解密也是在这个分层上面处理。
5.Session Layer:会话层
在这个层级当中主要定义了两个地址之间的联机信道之连接与挂断，此外，亦可建立应用程序之对谈、 提供其他加强型服务如网络管理、签到签退、对谈之控制等等。
如果说传送层是在判断资料封包是否可以正确的到达目标，那么会谈层则是在确定网络服务建立联机的确认.
4.Transport Layer:传输层
这一个分层定义了发送端与接收端的联机技术(如TCP, UDP技术),同时包括该技术的封包格式，数据封包的传送、流程的控制、传输过程的侦测检查与复原重新传送等等， 
以确保各个数据封包可以正确无误的到达目的端。
3.Network Layer:网络层
IP (Internet Protocol) 就是在这一层定义的，同时也定义出计算机之间的联机建立、终止与维持等，数据封包的传输路径选择等等，
因此这个层级当中最重要的除了 IP 之外，就是封包能否到达目的地的路由 (route) 概念
2.Data-link Layer:数据层
这一层是比较特殊的一个阶层，因为底下是实体的定义，而上层则是软件封装的定义。因此第二层又分两个子层在进行数据的转换动作。
在偏硬件媒体部分，主要负责的是MAC(Media Access Control) ，我们称这个数据报裹为 MAC 讯框 (frame)，MAC 是网络媒体所能处理的主要数据报裹，
这也是最终被物理层编码成位串的数据。MAC 必须要经由通讯协议来取得媒体的使用权，目前最常使用的则是 IEEE 802.3 的以太网络协议。
偏向软件的部分则是由逻辑链接层 (logical link control, LLC) 所控制，主要在多任务处理来自上层的封包数据 (packet) 并转成 MAC 的格式， 
负责的工作包括讯息交换、流量控制、失误问题的处理等等。
1.Physical Layer:物理层
由于网络媒体只能传送0与1这种位串，因此物理层必须定义所使用的媒体设备之电压与讯号等，同时还必须了解数据讯框转成位串的编码方式，
最后连接实体媒体并传送/接收位串。

事实上， OSI 七层协议只是一个参考的模型 (model)，目前的网络社会并没有什么很知名的操作系统在使用 OSI 七层协定的联网程序代码。
OSI 所定义出来的七层协议在解释网络传输的情况来说， 可以解释的非常棒，因此大家都拿 OSI 七层协议来做为网络的教学与概念的理解。
至于实际的联网程序代码，那就交给 TCP/IP.

计算机网络协议： TCP/IP
虽然 OSI 七层协议的架构非常严谨，是学习网络的好材料。但是也就是因为太过严谨了，因此程序撰写相当不容易， 所以造成它在发展上面些许的困扰。
而由 ARPANET 发展而来的 TCP/IP 又如何呢？其实 TCP/IP 也是使用 OSI 七层协议的观念，所以同样具有分层的架构，只是将它简化为四层，
在结构上面比较没有这么严谨，程序撰写会比较容易些。后来在 1990 年代由于 email, WWW 的流行，造成 TCP/IP 这个标准为大家所接受，
这也造就目前我们的网络社会

 TCP/IP 是由 OSI 七层协议简化而来，两者之间的相关性
 
 OSI                     TCP/IP                    相关通信协议与标准
应用层                                             HTTP FTP SMTP POP3
表现层                    应用层                   NFS SSH
会话层

传输层                    传输层                    TCP UDP

网络层                    网络层                     IP ICMP

数据层                    链接层                    LAN:Ethernet,Token Ring   ARP
物理层                                             WAN:Modem,ISDN,ATM,Serial


TCP/IP 将应用、表现、会谈三层整合成一个应用层，在应用层上面可以实作的程序协议有 HTTP, SMTP, DNS 等等。 
传送层则没有变，不过依据传送的可靠性又将封包格式分为连接导向的 TCP 及非连接导向的 UDP 封包格式。
网络层也没有变，主要内容是提供了 IP 封包，并可选择最佳路由来到达目标 IP 地址。
数据链结层与物理层则整合成为一个链结层，包括定义硬件讯号、讯框转位串的编码等等，因此主要与硬件 (不论是区网还是广域网) 有关.

TCP/IP 是如何运作的?
应用程序阶段：打开浏览器，在浏览器上面输入网址列，按下 [Enter]。此时网址列与相关数据会被浏览器包成一个数据，并向下传给 TCP/IP 的应用层；
应用层：由应用层提供的 HTTP 通讯协议，将来自浏览器的数据报起来，并给予一个应用层表头，再向传送层丢去；
传送层：由于 HTTP 为可靠联机，因此将该数据丢入 TCP 封包内，并给予一个 TCP 封包的表头，向网络层丢去；
网络层：将 TCP 包裹包进 IP 封包内，再给予一个 IP 表头 (主要就是来源与目标的 IP 啰)，向链结层丢去；
链结层：如果使用以太网络时，此时 IP 会依据 CSMA/CD 的标准，包裹到 MAC 讯框中，并给予 MAC 表头，再转成位串后，利用传输媒体传送到远程主机上。

服务主机收到包裹后，在依据相反方向拆解开来，然后交给对应的层级进行分析，最后就让主机服务器软件得到你所想要的数据，该服务器软件再根据你的要求，
取得正确的资料后，又依循上述的流程，一层一层的包装起来， 最后传送到客户机浏览器上


四、LAN与WAN和使用的设备
广域网使用的设备
传统电话拨接：透过 ppp 协议
早期网络大概都只能透过调制解调器加上电话线以及计算机的九针串行端口 (以前接鼠标或游戏杆的插孔)，然后透过 Point-to-Point Protocol (PPP 协议) 
配合拨接程序来取得网络 IP 参数，这样就能够上网了。不过这样的速度非常慢，而且当电话拨接后， 就不能够讲电话了！
因为 PPP 支持 TCP/IP, NetBEUI, IPX/SPX 等通讯协议，所以使用度非常广。

整合服务数字网络 (Integrated Services Digital Network, ISDN)
也是利用现有的电话线路来达成网络联机的目的，只是联机的两端都需要有 ISDN 的调制解调器来提供联机功能。ISDN 的传输有多种通道可供使用，
并且可以将多个信道整合应用，因此速度可以成倍成长。基本的 B 信道速度约为 64Kbps，但如美国规格使用 23 个以上的通道来达成联机，此时速度可达 1.5Mbps 左右

非对称数位用路回路 (Asymmetric Digital Subscriber Line, ADSL)：透过 pppoe 协定
也是透过电话线来拨接后取得 IP 的一个方法，只不过这个方式使用的是电话的高频部分，与一般讲电话的频率不同。
因此妳可以一边使用 ADSL 上网同时透过同一个电话号码来打电话聊天。由于上传/下载的带宽不同， 因此才称为非对称的回路。
ADSL 同样使用调制解调器，只是他透过的是 PPPoE (PPP over Ethernet) 的方法！ 将 PPP 仿真在以太网络卡上，
因此你的主机需要透过一张网络卡来连接到调制解调器，并透过拨接程序来取得新的接口 (ppp0)。

电缆调制解调器 (Cable modem)
主要透过有线电视使用的缆线作为网络讯号媒体，同样需要具备调制解调器来连接到 ISP，以取得网络参数来上网。 
Cable modem 的带宽主要是分享型的，所以通常具有区域性。


局域网络使用的设备-以太网络
以太网络的流行主要是它成为国际公认的标准所致。早先 IEEE 所制订的以太网络标准为 802.3 的 IEEE 10BASE5 ，
这个标准主要的定义是：『10 代表传输速度为 10Mbps，BASE 表示采用基频信号来进行传输，至于 5 则是指每个网络节点之间最长可达 500 公尺。』
由于网络的传输信息就是 0 与 1 啊，因此，数据传输的单位为每秒多少 bit,亦即是 M bits/second, Mbps 的意思。
那么为何制订成为 10Mbps 呢？ 这是因为早期的网络线压制的方法以及相关的制作方法，还有以太网络卡制作的技术并不是很好， 
加上当时的数据传输需求并没有像现在这么高，所以 10Mbps 已经可以符合大多数人的需求了.

以太网络的传输协议：CSMA/CD
以太网络的传输主要就是网络卡对网络卡之间的数据传递, 每张以太网络卡出厂时，就会赋予一个独一无二的卡号，那就是所谓的 MAC (Media Access Control) 
太网络的网卡之间数据是如何传输?IEEE 802.3 的标准 CSMA/CD (Carrier Sense Multiple Access with Collision Detection) 
各个主机都是联机到集线器，然后透过集线器的功能向所有主机发起联机,集线器是一种网络共享媒体,网络共享媒体在单一时间点内， 仅能被一部主机所使用。

传输需要有以下的流程：
1.监听媒体使用情况 (Carrier Sense)：A 主机要发送网络封包前，需要先对网络媒体进行监听，确认没有人在使用后， 才能够发送出讯框；
2.多点传输 (Multiple Access)：A 主机所送出的数据会被集线器复制一份，然后传送给所有连接到此集线器的主机！ 也就是说， 
A 所送出的数据， B, C, D 三部计算机都能够接收的到！但由于目标是 D 主机，因此 B 与 C 会将此讯框数据丢弃，而 D 则会抓下来处理；
3.碰撞侦测 (Collision Detection)：该讯框数据附有检测能力，若其他主机例如 B 计算机也刚好在同时间发送讯框数据时，
那么 A 与 B 送出的数据碰撞在一块 ，此时这些讯框就是损毁，那么 A 与 B 就会各自随机等待一个时间， 然后重新透过第一步再传送一次该讯框数据。

解释：
1.网络忙碌时，集线器灯号闪个不停，但我的主机明明没有使用网络：
透过上述的流程我们会知道，不管哪一部主机发送出讯框，所有的计算机都会接收到！因为集线器会复制一份该数据给所有计算机。
因此，虽然只有一部主机在对外联机，但是在集线器上面的所有计算机灯号就都会闪个不停！
2.我的计算机明明没有被入侵，为何我的数据会被隔壁的计算机窃取：
透过上述的流程，我们只要在 B 计算机上面安装一套监听软件，这套软件将原本要丢弃的讯框数据捉下来分析，并且加以重组，
就能够知道原本 A 所送出的讯息了。这也是为什么我们都建议重要数据在因特网上面得要『加密』后再传输！
3.既然共享媒体只有一个主机可以使用，为何大家可以同时上网：
这个问题就有趣了，既然共享媒体一次只能被一个主机所使用，那么万一我传输 100MB 的档案，集线器就得被我使用 80 秒 (以 10Mbps 传输时)，
在这期间其他人都不可以使用吗？不是的，由于标准的讯框数据在网络卡与其他以太网络媒体一次只能传输 1500bytes，
因此我的 100MB 档案就得要拆成多个小数据报，然后一个一个的传送，每个数据报传送前都要经过 CSMA/CD 的机制。 
所以，这个集线器的使用权是大家抢着用的！即使只有一部主机在使用网络媒体时，那么这部主机在发送每个封包间， 也都是需要等待一段时间的 (96 bit time)！
4.讯框要多大比较好？能不能修改讯框？：
如上所述，那么讯框的大小能不能改变呢？因为如果讯框的容量能够增大，那么小数据报的数量就会减少， 那每个讯框传送间的等待就可以减少了！
是这样没错，但是以太网络标准讯框确实定义在 1500 bytes， 但近来的超高速以太网络媒体有支持 Jumbo frame (巨型讯框,注10) 的话，
那么就能够将讯框大小改为 9000bytes ！但不是很建议大家随便修改！为什么呢？


MAC 的封装格式
上面提到的 CSMA/CD 传送出去的讯框数据，其实就是 MAC 啦！MAC 其实就是我们上面一直讲到的讯框 (frame) ！ 只是这个讯框上面有两个很重要的数据，
就是目标与来源的网卡卡号，因此我们又简称网卡卡号为 MAC 而已。 简单的说，你可以把 MAC 想成是一个在网络线上面传递的包裹，
而这个包裹是整个网络硬件上面传送数据的最小单位了。 也就是说，网络线可想成是一条『一次仅可通过一个人』的独木桥， 而 MAC 就是在这个独木桥上面动的人。
结构：
前导码          目的地址       来源地址       数据字段通信      主要数据          检查码
8 bytes        6 bytes        6 bytes         2 bytes        46-1500bytes      4bytes

目的地址与来源地址指的就是网卡卡号 (hardware address, 硬件地址)，我们前面提到，每一张网卡都有一个独一无二的卡号， 
那个卡号的目的就在这个讯框的表头数据使用到啦！硬件地址最小由 00:00:00:00:00:00 到 FF:FF:FF:FF:FF:FF (16 进位法)， 
这 6 bytes 当中，前 3bytes 为厂商的代码，后 3bytes 则是该厂商自行设定的装置码.

在这个 MAC 的传送中，他仅在局域网络内生效，如果跨过不同的网域 (这个后面 IP 的部分时会介绍)，那么来源与目的的硬件地址就会跟着改变了。
这是因为变成不同网络卡之间的交流,所以卡号也不同.
比如A要传送给C,中间经过B（路由）    A---B---C
先由A传送到B，此时来源是A而目的地是B；B计算机接收后，察看该讯框，发现目标其实是 C 计算机，而为了与 C 计算机沟通， 
所以他会将讯框内的来源 MAC 改为B，而目的改为C，如此就可以直接传送到 C 计算机.

由于网络卡卡号是跟着网络卡走的，并不会因为重装操作系统而改变， 所以防火墙软件大多也能够针对网络卡来进行抵挡的工作。

为什么资料量最小要 46 最大为 1500 bytes？
讯框内的数据内容最大可达 1500bytes 这我们现在知道了，那为何要规范最小数据为 46bytes 呢？这是由于 CSMA/CD 机制所算出来的！ 
在这个机制上面可算出若要侦测碰撞，则讯框总数据量最小得要有 64bytes ，那再扣除目的地址、来源地址、检查码 (前导码不算) 后，
就可得到数据量最小得要有 46bytes 了！也就是说，如果妳要传输的数据小于 46byes ，那我们的系统会主动的填上一些填充码， 以补齐至少 46bytes 的容量才行。

 MTU 最大传输单位
 通过上面 MAC 封装的定义，现在我们知道标准以太网络讯框所能传送的数据量最大可以到达 1500 bytes ， 
 这个数值就被我们称为 MTU (Maximum Transmission Unit, 最大传输单位)。 你得要注意的是，每种网络接口的 MTU 都不相同，
 因此有的时候在某些网络文章上面你会看到 1492 bytes 的 MTU 等等。不过，在以太网络上，标准的定义就是 1500 bytes.
 
IP封包最大可以到 65535 bytes，比 MTU 还要大呢！既然礼物 (IP) 都比盒子 (MAC) 大，那怎么可能放的进去？所以，IP 封包是可以进行拆解的，
然后才能放到 MAC 当中啊！等到数据都传到目的地， 再由目的地的主机将他组装回来就是了。所以，如果 MTU 能够大一些的话，那么 IP 封包的拆解情况就会降低， 
封包与封包传送之间的等待时间 (前一小节提到的 96 bit time) 也会减少，就能够增加网络带宽的使用！

为了这个目的，所以 Gigabit 的以太网络媒体才有支持 Jumbo frame ！这个 Jumbo frame 一般都定义到 9000bytes。 
那么，我们的 MTU 能不能改成 9000bytes 呢？这样一来不就能够减少数据封包的拆解，以增加网络使用率吗？ 是这样没错，而且，
你也确实可以在 Linux 系统上更改 MTU 的！但是，如果考虑到整个网络，那么我们不建议你修改这个数值。 为什么呢？

我们的封包总是需要在 Internet 上面跑,你无法确认所有的网络媒体都是支持那么大的 MTU 对吧！ 
如果你的 9000 bytes 封包通过一个不支持 Jumbo frame 的网络媒体时，好一点的是该网络媒体 (例如 switch/router 等) 会主动的帮你重组而进行传送，
差一点的可能就直接回报这个封包无效而丢弃了.所以， MTU 设定为 9000 这种事情，大概仅能在内部网络的环境中作～
举例来说，很多的内部丛集系统 (cluster) 就将他们的内部网络环境 MTU 设定为 9000，但是对外的适配卡可还是原本的标准 1500 .

也就是说，不论你的网络媒体支持 MTU 到多大，你必须要考虑到你的封包需要传到目的地时， 所需要经过的所有网络媒体，然后再来决定你的 MTU 设定才行。
就因为这样，我们才不建议你修改标准以太网络的 MTU.


交换器与相关机制
当一个很忙碌的网络在运作时，集线器 (hub) 这个网络共享媒体就可能会发生碰撞的情况， 这是因为 CSMA/CD 的缘故。那有没有办法避免这种莫名其妙的封包碰撞情况呢

使用非共享媒体的交换器即可
交换器 (switch) 等级非常多，我们这里仅探讨支持 OSI 第二层的交换器。交换器与集线器最大的差异，在于交换器内有一个特别的内存， 
这个内存可以记录每个 switch port 与其连接的 PC 的 MAC 地址，所以，当来自 switch 两端的 PC 要互传数据时，
每个讯框将直接透过交换器的内存数据而传送到目标主机上！ 所以 switch 不是共享媒体，且 switch 的每个埠口 (port) 都具有独立的带宽.

全双工/半双工(full-duplex, half-duplex)
八蕊的网络线实际上仅有两对被使用，一对是用在传送，另一对则是在接收. 如果两端的 PC 同时支持全双工时，那表示 Input/Output 均可达到 10/100Mbps.
如果你的网络环境想要达到全双工时， 使用共享媒体的 Hub 是不可能的，因为网络线脚位的关系，无法使用共享媒体来达到全双工的！ 如果switch 也支持全双工模式，那么在 switch 两端的 PC 才能达到全双工.

自动协调速度机制 (auto-negotiation)
新的 hub/switch 因为有支持 auto-negotiation 又称为 N-Way 的功能，他可自动的协调出最高的传输速度来沟通喔！如果有 Gigabit 与 10/100Mbps 在 switch 上面， 
则 N-Way 会先使用最高的速度 (gigabit) 测试是否能够全部支持，如果不行的话，就降速到下一个等级亦即 100 Mbps 的速度来运作.

自动分辨网络线跳线或并行线 (Auto MDI/MDIX)：
因为 switch 若含有auto MDI/MDIX 的功能时， 会自动分辨网络线的脚位来调整联机的，所以你就不需要管你的网络线是跳线还是并行线.

讯号衰减造成的问题
由于电子讯号是会衰减的，所以当网络线过长导致电子讯号衰减的情况严重时， 就会导致联机质量的不良.
因此，链接各个节点的网络线长度是有限制的,造成讯号衰减的情况并非仅有网络线长度而已！如果你的网络线折得太严重(例如在门边常常被门板压，导致变形) ，
或者是自行压制网络线接头，但是接头部分的八蕊蕊线缠绕度不足导致电磁干扰严重， 或者是网络线放在户外风吹日晒导致脆化的情况等等，
都会导致电子讯号传递的不良而造成联机质量恶劣， 此时常常就会发现偶而可以联机、有时却又无法联机的问题了！
因此，当你需要针对企业内部来架设整体的网络时， 注意结构化布线可是很重要的.


TCP/IP 的网络层相关封包与数据
我们现在知道要有网络的话，必须要有网络相关的硬件，而目前最常见的网络硬件接口为以太网络，包括网络线、网络卡、Hub/Switch 等等。
而以太网络上面的传输使用网络卡卡号为基准的 MAC 讯框，配合 CSMA/CD 的标准来传送讯框，这就是硬件部分。
在软件部分，我们知道 Internet 其实就是 TCP/IP 这个通讯协议的通称，Internet 是由 InterNIC 所统一管理的， 
但其实他仅是负责分配 Internet 上面的 IP 以及提供相关的 TCP/IP 技术文件而已。不过 Internet 最重要的就是 IP.

IP 封包的封装
目前因特网社会的 IP 有两种版本，一种是目前使用最广泛的 IPv4 (Internet Protocol version 4, 因特网协定第四版)， 一种则是预期未来会热门的 IPv6 。
IPv4 记录的地址由于仅有 32 位，预计在 2020 年前后就会分发完毕，如此一来， 新兴国家或者是新的网络公司，将没有网络可以使用。
为了避免这个问题发生，因此就有 IPv6 的产生。 IPv6 的地址可以达到 128 位，可以多出 2 的 96 次方倍的网址数量，这样的 IP 数量几乎用不完啦！
虽然 IPv6 具有前瞻性，但目前主流媒体大多还是使用 IPv4 ，因此本文主要谈到的 IP 都指 IPv4 而言.

IP 封包可以达到 65535 bytes 这么大，在比 MAC 大的情况下，我们的操作系统会对 IP 进行拆解的动作。至于 IP 封装的表头数据绘制如下:

 ___________________________________________________________________________________________________________
|___4 bytes___|___4 bytes___|___________8 bytes__________|__3 bytes___|______________13 bytes_______________|
|___Version___|___IHL_______|______Type of service_______|__________________Total Length____________________|
|__________________________Identification________________|___Flags____|__________Fragmentation Offset_______|
|_________Time to Live______|___________Protocol_________|___________________Header Checksum________________|
|__________________________________________________Source Address___________________________________________|
|__________________________________________________Destination Address______________________________________|
|_____________________________Options_________________________________|______________Padding________________|
|                                                                                                           |
|                                                      Data                                                 |
|___________________________________________________________________________________________________________|

注意：每一行所占用的位数为 32 bits
1.Version(版本)
宣告这个 IP 封包的版本，例如目前惯用的还是 IPv4 这个版本就在这里宣告。

2.IHL(Internet Header Length, IP表头的长度)
告知这个 IP 封包的表头长度，使用的单位应该是字组 (word) ，一个字组为 4bytes 大小喔。

3.Type of Service(服务类型)
这个项目的内容为『PPPDTRUU』，表示这个 IP 封包的服务类型，主要分为：
PPP：表示此 IP 封包的优先度，目前很少使用；
D：若为 0 表示一般延迟(delay)，若为 1 表示为低延迟；
T：若为 0 表示为一般传输量 (throughput)，若为 1 表示为高传输量；
R：若为 0 表示为一般可靠度(reliability)，若为 1 表示高可靠度。
UU：保留尚未被使用。
举例来说，gigabit 以太网络的种种相关规格可以让这个 IP 封包加速且降低延迟，某些特殊的标志就是在这里说明的。

4.Total Length(总长度)
指这个 IP 封包的总容量，包括表头与内容 (Data) 部分。最大可达 65535 bytes。

5.Identification(辨别码)
我们前面提到 IP 袋子必须要放在 MAC 袋子当中。不过，如果 IP 袋子太大的话，就得先要将 IP 再重组成较小的袋子然后再放到 MAC 当中。
而当 IP 被重组时，每个来自同一个 IP 的小袋子就得要有个标识符以告知接收端这些小袋子其实是来自同一个 IP 封包才行。 
也就是说，假如 IP 封包其实是 65536 那么大 (前一个 Total Length 有规定)， 那么这个 IP 就得要再被分成更小的 IP 分段后才能塞进 MAC 讯框中。
那么每个小 IP 分段是否来自同一个 IP 资料，呵呵！那就是这个标识符的功用啦！

6.Flags(特殊旗标)
这个地方的内容为『0DM』，其意义为：
D：若为 0 表示可以分段，若为 1 表示不可分段
M：若为 0 表示此 IP 为最后分段，若为 1 表示非最后分段。

7.Fragment Offset(分段偏移)
表示目前这个 IP 分段在原始的 IP 封包中所占的位置。就有点像是序号啦，有这个序号才能将所有的小 IP 分段组合成为原本的 IP 封包大小！
透过 Total Length, Identification, Flags 以及这个 Fragment Offset 就能够将小 IP 分段在收受端组合起来！

8.Time To Live(TTL, 存活时间)
表示这个 IP 封包的存活时间，范围为 0-255。当这个 IP 封包通过一个路由器时， TTL 就会减一，当 TTL 为 0 时，这个封包将会被直接丢弃。
说实在的，要让 IP 封包通过 255 个路由器，还挺难的～ ^_^

9.Protocol Number(协定代码)
1	ICMP (Internet Control Message Protocol)
2	IGMP (Internet Group Management Protocol)
3	GGP (Gateway-to-Gateway Protocol)
4	IP (IP in IP encapsulation)
6	TCP (Transmission Control Protocol)
8	EGP (Exterior Gateway Protocol)
17	UDP (User Datagram Protocol)
我们比较常见到的是 TCP, UDP, ICMP

10.Header Checksum(表头检查码)
用来检查这个 IP 表头的错误检验之用。

11.Source Address
还用讲吗？当然是来源的 IP 地址，从这里我们也知道 IP 是 32 位喔！

12.Destination Address
有来源还需要有目标才能传送，这里就是目标的 IP 地址。

13.Options (其他参数)
这个是额外的功能，提供包括安全处理机制、路由纪录、时间戳、严格与宽松之来源路由等。

14.Padding(补齐项目)
由于 Options 的内容不一定有多大，但是我们知道 IP 每个数据都必须要是 32 bits，所以，若 Options 的数据不足 32 bits 时，则由 padding 主动补齐.

你只要知道 IP 表头里面含有： TTL, Protocol, 来源地址与目标地址也就够了！而这个 IP 表头的来源与目标 IP ，以及那个判断通过多少路由器的 TTL ，
就能了解到这个 IP 将被如何传送到目的端。后续各小节我们将介绍 IP 的组成与范围，还有 IP 封包如何传送的机制 (路由) 等等.

IP 地址的组成与分级
 IP (Internet Protocol) 其实是一种网络封包，而这个封包的表头最重要的就是那个 32 位的来源与目标地址.
 既然 IP 的组成是 32 bits 的数值，也就是由 32 个 0 与 1 组成的一连串数字！那么当我们思考所有跟 IP 有关的参数时，
 你就应该要将该参数想成是 32 位的数据喔！ 不过，因为人类对于二进制实在是不怎么熟悉，所以为了顺应人们对于十进制的依赖性，
 因此，就将 32 bits 的 IP 分成四小段，每段含有 8 个 bits ，将 8 个 bits 计算成为十进制，并且每一段中间以小数点隔开，
 那就成了目前大家所熟悉的 IP 的书写模样了.
 IP 的表示式：
00000000.00000000.00000000.00000000   ==> 0.0.0.0
11111111.11111111.11111111.11111111   ==> 255.255.255.255

所以 IP 最小可以由 0.0.0.0 一直到 255.255.255.255 ！但在这一串数字中，其实还可以分为两个部分！ 
主要分为 Net_ID (网域号码)与 Host_ID (主机号码) 两部份:
192.168.0.0~192.168.0.255 这个 Class C 的说明：
11000000.10101000.00000000.00000000
11000000.10101000.00000000.11111111
|----------Net_ID---------|-host--|

在同一个物理网段内，主机的 IP 具有相同的 Net_ID ，并且具有独特的 Host_ID
当所有的主机都是使用同一个网络媒体串在一起， 这个时候这些主机在实体装置上面其实是联机在一起的，那么就可以称为这些主机在同一个物理网段内了！ 
同时并请注意，同一个物理网段之内，可以依据不同的 IP 的设定，而设定成多个『IP 网段』.
请注意，同一个 Net_ID 内，不能具有相同的 Host_ID ，否则就会发生 IP 冲突，可能会造成两部主机都没有办法使用网络的问题.

IP 在同一网域的意义
那么同一个网域该怎么设定，与将 IP 设定在同一个网域之内有什么好处呢？

1.Net_ID 与 Host_ID 的限制：
在同一个网段内，Net_ID 是不变的，而 Host_ID 则是不可重复，此外，Host_ID 在二进制的表示法当中，不可同时为 0 也不可同时为 1 ，
因为全为 0 表示整个网段的地址 (Network IP)，而全为 1 则表示为广播的地址 (Broadcast IP)。
例如上面的例子当中，192.168.0.0 (Host_ID 全部为 0)以及 192.168.0.255 (Host_ID 全部为 1) 不可用来作为网段内主机的 IP 设定，
也就是说，这个网段内可用来设定主机的 IP 是由 192.168.0.1 到 192.168.0.254；

2.在区网内透过 IP 广播传递数据
在同物理网段的主机如果设定相同的网域 IP 范围 (不可重复)，则这些主机都可以透过 CSMA/CD 的功能直接在区网内用广播进行网络的联机，
亦即可以直接网卡对网卡传递数据 (透过 MAC 讯框)；

3.设定不同区网在同物理网段的情况
在同一个物理网段之内，如果两部主机设定成不同的 IP 网段，则由于广播地址的不同，导致无法透过广播的方式来进行联机。 
此时得要透过路由器 (router) 来进行沟通才能将两个网域连结在一起。

4.网域的大小
当 Host_ID 所占用的位越大，亦即 Host_ID 数量越多时，表示同一个网域内可用以设定主机的 IP 数量越多。

因此设定在同一个网域内,每一部计算机都可以直接透过 MAC 来进行数据的交流，而不必经由 Router (路由器) 来进行封包的转递.


IP 的分级
InterNIC 将整个 IP 网段分为五种等级， 每种等级的范围主要与 IP 那 32 bits 数值的前面几个位有关
以二进制说明 Network 第一个数字的定义：
Class A : 0xxxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx  ==> NetI_D 的开头是 0
          |--net--|---------host------------|
Class B : 10xxxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx  ==> NetI_D 的开头是 10
          |------net-------|------host------|
Class C : 110xxxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx  ==> NetI_D 的开头是 110
          |-----------net-----------|-host--|
Class D : 1110xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx  ==> NetI_D 的开头是 1110
Class E : 1111xxxx.xxxxxxxx.xxxxxxxx.xxxxxxxx  ==> NetI_D 的开头是 1111
五种分级在十进制的表示：
Class A :   0.xx.xx.xx ~ 127.xx.xx.xx
Class B : 128.xx.xx.xx ~ 191.xx.xx.xx
Class C : 192.xx.xx.xx ~ 223.xx.xx.xx
Class D : 224.xx.xx.xx ~ 239.xx.xx.xx
Class E : 240.xx.xx.xx ~ 255.xx.xx.xx

根据上表的说明，我们可以知道，你只要知道 IP 的第一个十进制数，就能够约略了解到该 IP 属于哪一个等级， 以及同网域 IP 数量有多少.
不过，上表中你只要记忆三种等级，亦即是 Class A, B, C 即可，因为 Class D 是用来作为群播 (multicast) 的特殊功能之用 (最常用在大批计算机的网络还原)，
至于 Class E 则是保留没有使用的网段。因此，能够用来设定在一般系统上面的，就只有 Class A, B, C 三种等级的 IP.

IP 的种类与取得方式
在 IPv4 里面就只有两种 IP 的类别，分别是：
Public IP : 公共 IP ，经由 INTERNIC 所统一规划的 IP，有这种 IP 才可以连上 Internet ；
Private IP : 私有 IP 或保留 IP，不能直接连上 Internet 的 IP ， 主要用于局域网络内的主机联机规划。

早在 IPv4 规划的时候就担心 IP 会有不足的情况，而且为了应付某些企业内部的网络设定，于是就有了私有 IP (Private IP) 的产生了。
私有 IP 也分别在 A, B, C 三个 Class 当中各保留一段作为私有 IP 网段，那就是：

Class A：10.0.0.0    - 10.255.255.255
Class B：172.16.0.0  - 172.31.255.255
Class C：192.168.0.0 - 192.168.255.255

由于这三段 Class 的 IP 是预留使用的，所以并不能直接作为 Internet 上面的连接之用，不然的话，到处就都有相同的 IP ！那怎么行！网络岂不混乱？
所以，这三个 IP 网段就只做为内部私有网域的 IP 沟通之用。简单的说，他有底下的几个限制：
私有 IP 的路由信息不能对外散播 (只能存在内部网络)；
使用私有 IP 作为来源或目的地址的封包，不能透过 Internet 来转送 (不然网络会混乱)；
关于私有 IP 的参考纪录(如 DNS)，只能限于内部网络使用 (一样的原理)

这个私有 IP 有什么好处呢？由于他的私有路由不能对外直接提供信息，所以，你的内部网络将不会直接被 Internet 上面的 Cracker 所攻击！
但是，你也就无法以私有 IP 来『直接上网』！因此相当适合一些尚未具有 Public IP 的企业内部用来规划其网络之设定！
否则当你随便指定一些可能是 Public IP 的网段来规划你企业内部的网络设定时，万一哪一天真的连上 Internet 了，
那么岂不是可能会造成跟 Internet 上面的 Public IP 相同了吗？

此外，在没有可用的公开网络情况下，如果你想要跟同学玩联机游戏怎办？也就是说，在区网内自己玩自己的联机游戏， 
此时你只要规范好所有同学在同一段私有 IP 网段中，就能够顺利的玩你的网络啦！就这么简单呢！

那么万一你又要将这些私有 IP 送上 Internet 呢？这个简单，设定一个简单的防火墙加上 NAT (Network Address Transfer) 服务，
你就可以透过 IP 伪装 (不要急，这个在后面也会提到) 来使你的私有 IP 的计算机也可以连上 Internet.

特殊的 loopback IP 网段
好了，那么除了这个预留的 IP 网段的问题之外，还有没有什么其他的怪东西呢？，还有一个奇怪的 Class A 的网域，
那就是 lo 这个奇怪的网域啦(注意：是小写的 o 而不是零)！这个 lo 的网络是当初被用来作为测试操作系统内部循环所用的一个网域，
同时也能够提供给系统内部原本就需要使用网络接口的服务 (daemon) 所使用。

简单的说，如果你没有安装网络卡在的机器上面， 但是你又希望可以测试一下在你的机器上面设定的服务器环境到底可不可以顺利运作，这个时候怎么办， 
就是利用这个所谓的内部循环网络！这个网段在 127.0.0.0/8 这个 Class A，而且默认的主机 (localhost) 的 IP 是 127.0.0.1 
当你启动了你的 WWW 服务器，然后在你的主机的 X-Window 上面执行 http://localhost 就可以直接看到你的主页！而且不需要安装网络卡！测试很方便吧！

此外，你的内部使用的 mail 怎么运送邮件呢？例如你的主机系统如何 mail 给 root 这个人呢,也就是使用这一个内部循环！
当要测试你的 TCP/IP 封包与状态是否正常时，可以使用这个！(你的主机上面没有网络卡， 那么你可以测试你的 WWW 服务器设定是否正确吗？
当然可以！使用 127.0.0.1 这个 Address ).

IP 的取得方式
主机的 IP 与相关网域的设定方式主要有：
直接手动设定(static)： 你可以直接向你的网管询问可用的 IP 相关参数，然后直接编辑配置文件 (或使用某些软件功能) 来设定你的网络。 
                      常见于校园网络的环境中，以及向 ISP 申请固定 IP 的联机环境；
透过拨接取得： 向你的 ISP 申请注册，取得账号密码后，直接拨接到 ISP ，你的 ISP 会透过他们自己的设定，让你的操作系统取得正确的网络参数。
             此时你并不需要手动去编辑与设定相关的网络参数啦。为因应用户的需求，某些 ISP 也提供很多不同的 IP 分配机制。
             包括 hinet, seednet 等等都有提供 ADSL 拨接后取得固定 IP 的方式！ 详情请向你的 ISP 洽询。
自动取得网络参数 (DHCP)： 在局域网络内会有一部主机负责管理所有计算机的网络参数，你的网络启动时就会主动向该服务器要求 IP 参数， 
              若取得网络相关参数后，你的主机就能够自行设定好所有服务器给你的网络参数了。最常使用于企业内部、IP 分享器后端、 校园网络与宿舍环境，
              及缆线宽带等联机方式。
              
不管是使用上面哪种方式取得的 IP ，你的 IP 都只有所谓的『 Public 与 Private IP 』而已！而其他什么浮动式、固定制、 动态式等等有的没有的，
就只是告诉你这个 IP 取得的方式而已.


Netmask, 子网与 CIDR (Classless Interdomain Routing)
IP 这个 32 位的数值中分为网域号码与主机号码，其中 Class C 的网域号码占了 24 位，而其实我们还可以将这样的网域切的更细，
就是让第一个 Host_ID 被拿来作为 Net_ID ，所以，整个 Net_ID 就有 25 bits ，至于 Host_ID 则减少为 7 bits 。
在这样的情况下，原来的一个 Class C 的网域就可以被切分为两个子域，而每个子域就有『 256/2 - 2 = 126 』个可用的 IP 了！
这样一来，就能够将原本的一个网域切为两个较细小的网域，方便分门别类的设计.

Netmask, 或称为 Subnet mask (子网掩码)

子网掩码是一个应用于TCP/IP网络的32位二进制值，它可以屏蔽掉ip地址中的一部分，从而分离出ip地址中的网络部分与主机部分，
基于子网掩码，管理员可以将网络进一步划分为若干子网.

为什么需要使用子网掩码
在使用TCP/IP协议的两台计算机之间进行通信时，我们通过将本机的子网掩码与接受方主机的ip地址进行'与'运算，即可得到目标主机所在的网络号，
又由于每台主机在配置TCP/IP协议时都设置了一个本机ip地址与子网掩码，所以可以知道本机所在的网络号。 
通过比较这两个网络号，就可以知道接受方主机是否在本网络上。如果网络号相同，表明接受方在本网络上，那么可以通过相关的协议把数据包直接发送到目标主机；
如果网络号不同，表明目标主机在远程网络上，那么数据包将会发送给本网络上的路由器，由路由器将数据包发送到其他网络，直至到达目的地。
在这个过程中你可以看到，子网掩码是不可或缺的.

如何用子网掩码得到网络/主机地址
过程如下： 
1.将ip地址与子网掩码转换成二进制； 
2.将二进制形式的ip地址与子网掩码做'与'运算，将答案化为十进制便得到网络地址； 
3.将二进制形式的子网掩码取'反'； 
4.将取'反'后的子网掩码与ip地址做'与'运算，将答案化为十进制便得到主机地址。 

下面我们用一个例子给大家演示：
假设有一个I P 地址：192.168.0.1 
子网掩码为：255.255.255.0 
化为二进制为：I P 地址11000000.10101000.00000000.00000001 
子网掩码             11111111.11111111.11111111.00000000 
将两者做'与'运算得：  11000000.10101000.00000000.00000000 
将其化为十进制得：192.168.0.0 
这便是上面ip的网络地址，主机地址以此类推。 
小技巧：由于观察到上面的子网掩码为C类地址的默认子网掩码（即未划分子网），便可直接看出网络地址为ip地址的前三部分，即前三个字节。
为什么要做'与'运算而不是别的？其实你仔细观察一下上面的例子就应该能明白。 
'1'在做'与'运算时，不影响结果，'0'在做'与'运算时，将得到0，
利用'与'的这个特性，当管理员设置子网掩码时，即将子网掩码上与"网络地址"所对应的位都设为'1',其他位都设为'0',
那么当作'与'时，ip地址中的网络号将被保留到结果中，而主机号将被置0，这样就解析出了网络号，
解析主机号也一样，只需先把子网掩码取'反',再做'与'.

以192.168.0.0~192.168.0.255为例：
既然 Net_ID 是不可变的，那就假设他所占据的 bits 已经被用光了 (全部为 1)，
而 Host_ID 是可变的，就将他想成是保留着 (全部为 0)，所以， Netmask 的表示就成为
192.168.0.0~192.168.0.255 这个 C Class 的 Netmask 说明
第一个 IP： 11000000.10101000.00000000.00000000
最后一个 ： 11000000.10101000.00000000.11111111
           |----------Net_ID---------|-host--|
Netmask  ： 11111111.11111111.11111111.00000000  <== Netmask 二进制
         ：   255   .  255   .  255   .   0      <== Netmask 十进制
特别注意，netmask 也是 32 位，在数值上，位于 Net_ID 的为 1 而 Host_ID 为 0

A, B, C Class 的 Netmask 表示就成为这样：
Class A, B, C 三个等级的 Netmask 缺省掩码表示方式：
Class A : 11111111.00000000.00000000.00000000 ==> 255.  0.  0.  0
Class B : 11111111.11111111.00000000.00000000 ==> 255.255.  0.  0
Class C : 11111111.11111111.11111111.00000000 ==> 255.255.255.  0

自定义子网掩码:
将一个网络划分为几个子网，需要每一段使用不同的网络号或子网号，实际上我们可以认为是将主机号分为两个部分：子网号、子网主机号。 形式如下： 
未做子网划分的ip地址：网络号＋主机号 
做子网划分后的ip地址：网络号＋子网号＋子网主机号 
也就是说ip地址在化分子网后，以前的主机号位置的一部分给了子网号，余下的是子网主机号。

子网划分也是靠子网掩码来实现的
子网是指一个ip地址上生成的逻辑网络，它可以让一个网络地址跨越多个物理网络，即一个网络地址代表多个网络(很明显这样做可以节省ip地址)

子网划分说白了是这样一个事情：因为在划分了子网后，ip地址的网络号是不变的，因此在局域网外部看来，这里仍然只存在一个网络，即网络号所代表的那个网络；
但在网络内部却是另外一个景象，因为我们每个子网的子网号是不同的，当用化分子网后的ip地址与子网掩码（注意，这里指的子网掩码已经不是缺省子网掩码了，而是自定义子网掩码，
是管理员在经过计算后得出的）做'与'运算时，每个子网将得到不同的子网地址，从而实现了对网络的划分（得到了不同的地址，当然就能区别出各个子网了.

子网编址技术，即子网划分将会有助于以下问题的解决： 
1）巨大的网络地址管理耗费：如果你是一个A类网络的管理员，你一定会为管理数量庞大的主机而头痛的； 
2）路由器中的选路表的急剧膨胀：当路由器与其他路由器交换选路表时，互联网的负载是很高的，所需的计算量也很高； 
3）IP地址空间有限并终将枯竭：这是一个至关重要的问题，高速发展的internet,使原来的编址方法不能适应，而一些ip地址却不能被充分的利用，造成了浪费。 
因此，在配置局域网或其他网络时，根据需要划分子网是很重要的，有时也是必要的。现在，子网编址技术已经被绝大多数局域网所使用。

如何划分子网及确定子网掩码 
1.先确定需要划分多少子网N
2.则占用位数space=N的二进制位数
3.将子网掩码中与主机号的前n位对应的位置置1，其余位置置0

结论
1）如何判断是否做了子网划分
如果它使用了缺省子网掩码，那么表示没有作子网划分；反之，则一定作了子网划分。 
2）如何计算子网地址
将ip地址与子网掩码的二进制形式做'与'，得到的结果即为子网地址。 
3）如何计算主机地址
先将子网掩码的二进制取'反'，再与ip地址做'与'
4）如何计算子网数量？ 
这个问题大家会常常提到，还是从子网掩码入手，主要有两个步骤： 
1.观察子网掩码的二进制形式，确定作为子网号的位数n； 
2.子网数量为2的n次方－2(开头是自己，结尾是广播)
5）如何计算总主机数量，子网内主机数量
总主机数量＝子网数量×子网内主机数量 
6）计算ip地址范围 
通过一个自定义子网掩码，我们可以得到这个网络所有可能的ip地址范围。 
具体步骤： 
1.写出二进制子网地址； 
2.将子网地址化为十进制； 
3.计算子网所能容纳主机数； 
4.得出ip范围（起始地址：子网地址＋1；终止地址：子网地址＋主机数） 



路由概念
我们知道在同一个区网里面，可以透过 IP 广播的方式来达到资料传递的目的。但如果是非区网内的数据呢？ 这时就得要透过那个所谓的邮局 (路由器) 的帮忙了.
Gateway / Router ：网关/路由器的功能就是在负责不同网域之间的封包转递 (IP Forwarding)，由于路由器具有 IP Forwarding 的功能，并且具有管理路由的能力， 
所以可以将来自不同网域之间的封包进行转递的功能.

每部主机都有自己的路由表
不同网段数据传送：
1.查询 IP 封包的目标 IP 地址：IP包内的目的地址
2.查询是否位于本机所在的网域之路由设定：目标 IP 与本机 IP 的 Net_ID 相同时(同一网域)，则 PC01 会直接透过区网功能，将数据直接传送给目的地主机,不同则下一步
3.查询预设路由 (default gateway):将该 IP 封包送到预设路由器 (default gateway) 上头去
4.送出封包至 gateway 后，不理会封包流向:接下来交给Router处理，类似以上步骤循环.

而 Router 在传送时，也是依据 Router 自己的路由表来判断该封包应该经由哪里传送出去的

观察路由：
主机网段：192.168.0.0/24 这个网域
[root@www ~]# route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref  Use Iface
192.168.0.0     *               255.255.255.0   U     0      0      0 eth0
127.0.0.0       *               255.0.0.0       U     0      0      0 lo
default         192.168.0.254   0.0.0.0         UG    0      0      0 eth0

[root@www ~]# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref  Use Iface
192.168.0.0     0.0.0.0         255.255.255.0   U     0      0      0 eth0
127.0.0.0       0.0.0.0         255.0.0.0       U     0      0      0 lo
0.0.0.0         192.168.0.254   0.0.0.0         UG    0      0      0 eth0

# 上面输出的数据共有八个字段，你需要注意的有几个地方：
# Destination ：其实就是 Network 的意思；
# Gateway     ：就是该接口的 Gateway 那个 IP 啦！若为 0.0.0.0 表示不需要额外的 IP；
# Genmask     ：就是 Netmask 啦！与 Destination 组合成为一部主机或网域；
# Flags       ：共有多个旗标可以来表示该网域或主机代表的意义：
#               U：代表该路由可用；
#               G：代表该网域需要经由 Gateway 来帮忙转递；
#               H：代表该行路由为一部主机，而非一整个网域；
# Iface       ：就是 Interface (接口) 的意思。

IP 与 MAC：链结层的 ARP 与 RARP 协定
事实上用在传递数据的是以太网络.以太网络主要是用网卡卡号 (MAC).IP 与 MAC有一个关连性存在.

ARP (Address Resolution Protocol, 网络地址解析) 协议

RARP (Revers ARP, 反向网络地址解析)











